//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\CalcLang.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SharpIrcBot.Plugins.Calc.Language {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class CalcLangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, Whitespaces=14, Decimal=15, Identifier=16, 
		Integer=17, Integer10=18, Integer16=19, Integer8=20, Integer2=21;
	public const int
		RULE_fullExpression = 0, RULE_expression = 1, RULE_arglist = 2;
	public static readonly string[] ruleNames = {
		"fullExpression", "expression", "arglist"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'-'", "'**'", "'*'", "'//'", "'/'", "'%'", "'+'", 
		"'&'", "'^'", "'|'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "Whitespaces", "Decimal", "Identifier", "Integer", "Integer10", 
		"Integer16", "Integer8", "Integer2"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CalcLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CalcLangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CalcLangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CalcLangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class FullExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(CalcLangParser.Eof, 0); }
		public FullExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fullExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICalcLangListener typedListener = listener as ICalcLangListener;
			if (typedListener != null) typedListener.EnterFullExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalcLangListener typedListener = listener as ICalcLangListener;
			if (typedListener != null) typedListener.ExitFullExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalcLangVisitor<TResult> typedVisitor = visitor as ICalcLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFullExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FullExpressionContext fullExpression() {
		FullExpressionContext _localctx = new FullExpressionContext(Context, State);
		EnterRule(_localctx, 0, RULE_fullExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6; expression(0);
			State = 7; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AddContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AddContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalcLangListener typedListener = listener as ICalcLangListener;
			if (typedListener != null) typedListener.EnterAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalcLangListener typedListener = listener as ICalcLangListener;
			if (typedListener != null) typedListener.ExitAdd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalcLangVisitor<TResult> typedVisitor = visitor as ICalcLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SubContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalcLangListener typedListener = listener as ICalcLangListener;
			if (typedListener != null) typedListener.EnterSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalcLangListener typedListener = listener as ICalcLangListener;
			if (typedListener != null) typedListener.ExitSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalcLangVisitor<TResult> typedVisitor = visitor as ICalcLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DecContext : ExpressionContext {
		public ITerminalNode Decimal() { return GetToken(CalcLangParser.Decimal, 0); }
		public DecContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalcLangListener typedListener = listener as ICalcLangListener;
			if (typedListener != null) typedListener.EnterDec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalcLangListener typedListener = listener as ICalcLangListener;
			if (typedListener != null) typedListener.ExitDec(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalcLangVisitor<TResult> typedVisitor = visitor as ICalcLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDec(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BOrContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BOrContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalcLangListener typedListener = listener as ICalcLangListener;
			if (typedListener != null) typedListener.EnterBOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalcLangListener typedListener = listener as ICalcLangListener;
			if (typedListener != null) typedListener.ExitBOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalcLangVisitor<TResult> typedVisitor = visitor as ICalcLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncContext : ExpressionContext {
		public ITerminalNode Identifier() { return GetToken(CalcLangParser.Identifier, 0); }
		public ArglistContext arglist() {
			return GetRuleContext<ArglistContext>(0);
		}
		public FuncContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalcLangListener typedListener = listener as ICalcLangListener;
			if (typedListener != null) typedListener.EnterFunc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalcLangListener typedListener = listener as ICalcLangListener;
			if (typedListener != null) typedListener.ExitFunc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalcLangVisitor<TResult> typedVisitor = visitor as ICalcLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CstContext : ExpressionContext {
		public ITerminalNode Identifier() { return GetToken(CalcLangParser.Identifier, 0); }
		public CstContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalcLangListener typedListener = listener as ICalcLangListener;
			if (typedListener != null) typedListener.EnterCst(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalcLangListener typedListener = listener as ICalcLangListener;
			if (typedListener != null) typedListener.ExitCst(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalcLangVisitor<TResult> typedVisitor = visitor as ICalcLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCst(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MulContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalcLangListener typedListener = listener as ICalcLangListener;
			if (typedListener != null) typedListener.EnterMul(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalcLangListener typedListener = listener as ICalcLangListener;
			if (typedListener != null) typedListener.ExitMul(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalcLangVisitor<TResult> typedVisitor = visitor as ICalcLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMul(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParensContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParensContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalcLangListener typedListener = listener as ICalcLangListener;
			if (typedListener != null) typedListener.EnterParens(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalcLangListener typedListener = listener as ICalcLangListener;
			if (typedListener != null) typedListener.ExitParens(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalcLangVisitor<TResult> typedVisitor = visitor as ICalcLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BXorContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BXorContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalcLangListener typedListener = listener as ICalcLangListener;
			if (typedListener != null) typedListener.EnterBXor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalcLangListener typedListener = listener as ICalcLangListener;
			if (typedListener != null) typedListener.ExitBXor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalcLangVisitor<TResult> typedVisitor = visitor as ICalcLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBXor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BAndContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BAndContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalcLangListener typedListener = listener as ICalcLangListener;
			if (typedListener != null) typedListener.EnterBAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalcLangListener typedListener = listener as ICalcLangListener;
			if (typedListener != null) typedListener.ExitBAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalcLangVisitor<TResult> typedVisitor = visitor as ICalcLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntContext : ExpressionContext {
		public ITerminalNode Integer() { return GetToken(CalcLangParser.Integer, 0); }
		public IntContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalcLangListener typedListener = listener as ICalcLangListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalcLangListener typedListener = listener as ICalcLangListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalcLangVisitor<TResult> typedVisitor = visitor as ICalcLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DivContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalcLangListener typedListener = listener as ICalcLangListener;
			if (typedListener != null) typedListener.EnterDiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalcLangListener typedListener = listener as ICalcLangListener;
			if (typedListener != null) typedListener.ExitDiv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalcLangVisitor<TResult> typedVisitor = visitor as ICalcLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NegContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalcLangListener typedListener = listener as ICalcLangListener;
			if (typedListener != null) typedListener.EnterNeg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalcLangListener typedListener = listener as ICalcLangListener;
			if (typedListener != null) typedListener.ExitNeg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalcLangVisitor<TResult> typedVisitor = visitor as ICalcLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNeg(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntDivContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IntDivContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalcLangListener typedListener = listener as ICalcLangListener;
			if (typedListener != null) typedListener.EnterIntDiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalcLangListener typedListener = listener as ICalcLangListener;
			if (typedListener != null) typedListener.ExitIntDiv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalcLangVisitor<TResult> typedVisitor = visitor as ICalcLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PowContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PowContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalcLangListener typedListener = listener as ICalcLangListener;
			if (typedListener != null) typedListener.EnterPow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalcLangListener typedListener = listener as ICalcLangListener;
			if (typedListener != null) typedListener.ExitPow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalcLangVisitor<TResult> typedVisitor = visitor as ICalcLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPow(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RemContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RemContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalcLangListener typedListener = listener as ICalcLangListener;
			if (typedListener != null) typedListener.EnterRem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalcLangListener typedListener = listener as ICalcLangListener;
			if (typedListener != null) typedListener.ExitRem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalcLangVisitor<TResult> typedVisitor = visitor as ICalcLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				_localctx = new ParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 10; Match(T__0);
				State = 11; expression(0);
				State = 12; Match(T__1);
				}
				break;
			case 2:
				{
				_localctx = new FuncContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 14; Match(Identifier);
				State = 15; Match(T__0);
				State = 17;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << Decimal) | (1L << Identifier) | (1L << Integer))) != 0)) {
					{
					State = 16; arglist();
					}
				}

				State = 19; Match(T__1);
				}
				break;
			case 3:
				{
				_localctx = new NegContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 20; Match(T__2);
				State = 21; expression(14);
				}
				break;
			case 4:
				{
				_localctx = new CstContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 22; Match(Identifier);
				}
				break;
			case 5:
				{
				_localctx = new IntContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 23; Match(Integer);
				}
				break;
			case 6:
				{
				_localctx = new DecContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 24; Match(Decimal);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 59;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 57;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						_localctx = new PowContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 27;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 28; Match(T__3);
						State = 29; expression(14);
						}
						break;
					case 2:
						{
						_localctx = new MulContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 30;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 31; Match(T__4);
						State = 32; expression(13);
						}
						break;
					case 3:
						{
						_localctx = new IntDivContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 33;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 34; Match(T__5);
						State = 35; expression(12);
						}
						break;
					case 4:
						{
						_localctx = new DivContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 36;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 37; Match(T__6);
						State = 38; expression(11);
						}
						break;
					case 5:
						{
						_localctx = new RemContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 39;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 40; Match(T__7);
						State = 41; expression(10);
						}
						break;
					case 6:
						{
						_localctx = new AddContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 42;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 43; Match(T__8);
						State = 44; expression(9);
						}
						break;
					case 7:
						{
						_localctx = new SubContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 45;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 46; Match(T__2);
						State = 47; expression(8);
						}
						break;
					case 8:
						{
						_localctx = new BAndContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 48;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 49; Match(T__9);
						State = 50; expression(7);
						}
						break;
					case 9:
						{
						_localctx = new BXorContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 51;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 52; Match(T__10);
						State = 53; expression(6);
						}
						break;
					case 10:
						{
						_localctx = new BOrContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 54;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 55; Match(T__11);
						State = 56; expression(5);
						}
						break;
					}
					} 
				}
				State = 61;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArglistContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArglistContext arglist() {
			return GetRuleContext<ArglistContext>(0);
		}
		public ArglistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arglist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICalcLangListener typedListener = listener as ICalcLangListener;
			if (typedListener != null) typedListener.EnterArglist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalcLangListener typedListener = listener as ICalcLangListener;
			if (typedListener != null) typedListener.ExitArglist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalcLangVisitor<TResult> typedVisitor = visitor as ICalcLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArglist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArglistContext arglist() {
		ArglistContext _localctx = new ArglistContext(Context, State);
		EnterRule(_localctx, 4, RULE_arglist);
		try {
			State = 67;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 62; expression(0);
				State = 63; Match(T__12);
				State = 64; arglist();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 66; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 13);
		case 1: return Precpred(Context, 12);
		case 2: return Precpred(Context, 11);
		case 3: return Precpred(Context, 10);
		case 4: return Precpred(Context, 9);
		case 5: return Precpred(Context, 8);
		case 6: return Precpred(Context, 7);
		case 7: return Precpred(Context, 6);
		case 8: return Precpred(Context, 5);
		case 9: return Precpred(Context, 4);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x17', 'H', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x14', 
		'\n', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '\x1C', '\n', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '<', 
		'\n', '\x3', '\f', '\x3', '\xE', '\x3', '?', '\v', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 
		'\x46', '\n', '\x4', '\x3', '\x4', '\x2', '\x3', '\x4', '\x5', '\x2', 
		'\x4', '\x6', '\x2', '\x2', '\x2', 'U', '\x2', '\b', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x6', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\t', '\x5', '\x4', '\x3', '\x2', '\t', '\n', 
		'\a', '\x2', '\x2', '\x3', '\n', '\x3', '\x3', '\x2', '\x2', '\x2', '\v', 
		'\f', '\b', '\x3', '\x1', '\x2', '\f', '\r', '\a', '\x3', '\x2', '\x2', 
		'\r', '\xE', '\x5', '\x4', '\x3', '\x2', '\xE', '\xF', '\a', '\x4', '\x2', 
		'\x2', '\xF', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x10', '\x11', '\a', 
		'\x12', '\x2', '\x2', '\x11', '\x13', '\a', '\x3', '\x2', '\x2', '\x12', 
		'\x14', '\x5', '\x6', '\x4', '\x2', '\x13', '\x12', '\x3', '\x2', '\x2', 
		'\x2', '\x13', '\x14', '\x3', '\x2', '\x2', '\x2', '\x14', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x15', '\x1C', '\a', '\x4', '\x2', '\x2', '\x16', 
		'\x17', '\a', '\x5', '\x2', '\x2', '\x17', '\x1C', '\x5', '\x4', '\x3', 
		'\x10', '\x18', '\x1C', '\a', '\x12', '\x2', '\x2', '\x19', '\x1C', '\a', 
		'\x13', '\x2', '\x2', '\x1A', '\x1C', '\a', '\x11', '\x2', '\x2', '\x1B', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x10', '\x3', '\x2', '\x2', 
		'\x2', '\x1B', '\x16', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x18', '\x3', 
		'\x2', '\x2', '\x2', '\x1B', '\x19', '\x3', '\x2', '\x2', '\x2', '\x1B', 
		'\x1A', '\x3', '\x2', '\x2', '\x2', '\x1C', '=', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', '\x1E', '\f', '\xF', '\x2', '\x2', '\x1E', '\x1F', '\a', 
		'\x6', '\x2', '\x2', '\x1F', '<', '\x5', '\x4', '\x3', '\x10', ' ', '!', 
		'\f', '\xE', '\x2', '\x2', '!', '\"', '\a', '\a', '\x2', '\x2', '\"', 
		'<', '\x5', '\x4', '\x3', '\xF', '#', '$', '\f', '\r', '\x2', '\x2', '$', 
		'%', '\a', '\b', '\x2', '\x2', '%', '<', '\x5', '\x4', '\x3', '\xE', '&', 
		'\'', '\f', '\f', '\x2', '\x2', '\'', '(', '\a', '\t', '\x2', '\x2', '(', 
		'<', '\x5', '\x4', '\x3', '\r', ')', '*', '\f', '\v', '\x2', '\x2', '*', 
		'+', '\a', '\n', '\x2', '\x2', '+', '<', '\x5', '\x4', '\x3', '\f', ',', 
		'-', '\f', '\n', '\x2', '\x2', '-', '.', '\a', '\v', '\x2', '\x2', '.', 
		'<', '\x5', '\x4', '\x3', '\v', '/', '\x30', '\f', '\t', '\x2', '\x2', 
		'\x30', '\x31', '\a', '\x5', '\x2', '\x2', '\x31', '<', '\x5', '\x4', 
		'\x3', '\n', '\x32', '\x33', '\f', '\b', '\x2', '\x2', '\x33', '\x34', 
		'\a', '\f', '\x2', '\x2', '\x34', '<', '\x5', '\x4', '\x3', '\t', '\x35', 
		'\x36', '\f', '\a', '\x2', '\x2', '\x36', '\x37', '\a', '\r', '\x2', '\x2', 
		'\x37', '<', '\x5', '\x4', '\x3', '\b', '\x38', '\x39', '\f', '\x6', '\x2', 
		'\x2', '\x39', ':', '\a', '\xE', '\x2', '\x2', ':', '<', '\x5', '\x4', 
		'\x3', '\a', ';', '\x1D', '\x3', '\x2', '\x2', '\x2', ';', ' ', '\x3', 
		'\x2', '\x2', '\x2', ';', '#', '\x3', '\x2', '\x2', '\x2', ';', '&', '\x3', 
		'\x2', '\x2', '\x2', ';', ')', '\x3', '\x2', '\x2', '\x2', ';', ',', '\x3', 
		'\x2', '\x2', '\x2', ';', '/', '\x3', '\x2', '\x2', '\x2', ';', '\x32', 
		'\x3', '\x2', '\x2', '\x2', ';', '\x35', '\x3', '\x2', '\x2', '\x2', ';', 
		'\x38', '\x3', '\x2', '\x2', '\x2', '<', '?', '\x3', '\x2', '\x2', '\x2', 
		'=', ';', '\x3', '\x2', '\x2', '\x2', '=', '>', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x5', '\x3', '\x2', '\x2', '\x2', '?', '=', '\x3', '\x2', '\x2', 
		'\x2', '@', '\x41', '\x5', '\x4', '\x3', '\x2', '\x41', '\x42', '\a', 
		'\xF', '\x2', '\x2', '\x42', '\x43', '\x5', '\x6', '\x4', '\x2', '\x43', 
		'\x46', '\x3', '\x2', '\x2', '\x2', '\x44', '\x46', '\x5', '\x4', '\x3', 
		'\x2', '\x45', '@', '\x3', '\x2', '\x2', '\x2', '\x45', '\x44', '\x3', 
		'\x2', '\x2', '\x2', '\x46', '\a', '\x3', '\x2', '\x2', '\x2', '\a', '\x13', 
		'\x1B', ';', '=', '\x45',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace SharpIrcBot.Plugins.Calc.Language
