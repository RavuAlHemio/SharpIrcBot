//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from GrammarGenLang.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SharpIrcBot.Plugins.GrammarGen.Lang {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public partial class GrammarGenLangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, Whitespaces=16, 
		Comments=17, LineComments=18, EscapedString=19, Identifier=20, Number=21;
	public const int
		RULE_ggrulebook = 0, RULE_ruledef = 1, RULE_ggrule = 2, RULE_paramrule = 3, 
		RULE_ggproduction = 4, RULE_alternative = 5, RULE_condition = 6, RULE_negated = 7, 
		RULE_weight = 8, RULE_sequenceElem = 9;
	public static readonly string[] ruleNames = {
		"ggrulebook", "ruledef", "ggrule", "paramrule", "ggproduction", "alternative", 
		"condition", "negated", "weight", "sequenceElem"
	};

	private static readonly string[] _LiteralNames = {
		null, "':'", "';'", "'{'", "','", "'}'", "'|'", "'!'", "'<'", "'>'", "'('", 
		"')'", "'['", "']'", "'*'", "'+'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "Whitespaces", "Comments", "LineComments", "EscapedString", 
		"Identifier", "Number"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GrammarGenLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GrammarGenLangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GrammarGenLangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GrammarGenLangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class GgrulebookContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuledefContext[] ruledef() {
			return GetRuleContexts<RuledefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuledefContext ruledef(int i) {
			return GetRuleContext<RuledefContext>(i);
		}
		public GgrulebookContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ggrulebook; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.EnterGgrulebook(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.ExitGgrulebook(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarGenLangVisitor<TResult> typedVisitor = visitor as IGrammarGenLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGgrulebook(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GgrulebookContext ggrulebook() {
		GgrulebookContext _localctx = new GgrulebookContext(Context, State);
		EnterRule(_localctx, 0, RULE_ggrulebook);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 20;
				ruledef();
				}
				}
				State = 23;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Identifier );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuledefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GgruleContext ggrule() {
			return GetRuleContext<GgruleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamruleContext paramrule() {
			return GetRuleContext<ParamruleContext>(0);
		}
		public RuledefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruledef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.EnterRuledef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.ExitRuledef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarGenLangVisitor<TResult> typedVisitor = visitor as IGrammarGenLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuledef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuledefContext ruledef() {
		RuledefContext _localctx = new RuledefContext(Context, State);
		EnterRule(_localctx, 2, RULE_ruledef);
		try {
			State = 27;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 25;
				ggrule();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 26;
				paramrule();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GgruleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(GrammarGenLangParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GgproductionContext ggproduction() {
			return GetRuleContext<GgproductionContext>(0);
		}
		public GgruleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ggrule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.EnterGgrule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.ExitGgrule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarGenLangVisitor<TResult> typedVisitor = visitor as IGrammarGenLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGgrule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GgruleContext ggrule() {
		GgruleContext _localctx = new GgruleContext(Context, State);
		EnterRule(_localctx, 4, RULE_ggrule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			Match(Identifier);
			State = 30;
			Match(T__0);
			State = 31;
			ggproduction();
			State = 32;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamruleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(GrammarGenLangParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(GrammarGenLangParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GgproductionContext ggproduction() {
			return GetRuleContext<GgproductionContext>(0);
		}
		public ParamruleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramrule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.EnterParamrule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.ExitParamrule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarGenLangVisitor<TResult> typedVisitor = visitor as IGrammarGenLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamrule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamruleContext paramrule() {
		ParamruleContext _localctx = new ParamruleContext(Context, State);
		EnterRule(_localctx, 6, RULE_paramrule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			Match(Identifier);
			State = 35;
			Match(T__2);
			State = 36;
			Match(Identifier);
			State = 41;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 37;
				Match(T__3);
				State = 38;
				Match(Identifier);
				}
				}
				State = 43;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 44;
			Match(T__4);
			State = 45;
			Match(T__0);
			State = 46;
			ggproduction();
			State = 47;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GgproductionContext : ParserRuleContext {
		public GgproductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ggproduction; } }
	 
		public GgproductionContext() { }
		public virtual void CopyFrom(GgproductionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AlternContext : GgproductionContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlternativeContext[] alternative() {
			return GetRuleContexts<AlternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlternativeContext alternative(int i) {
			return GetRuleContext<AlternativeContext>(i);
		}
		public AlternContext(GgproductionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.EnterAltern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.ExitAltern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarGenLangVisitor<TResult> typedVisitor = visitor as IGrammarGenLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAltern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GgproductionContext ggproduction() {
		GgproductionContext _localctx = new GgproductionContext(Context, State);
		EnterRule(_localctx, 8, RULE_ggproduction);
		int _la;
		try {
			_localctx = new AlternContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			alternative();
			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 50;
				Match(T__5);
				State = 51;
				alternative();
				}
				}
				State = 56;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlternativeContext : ParserRuleContext {
		public AlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alternative; } }
	 
		public AlternativeContext() { }
		public virtual void CopyFrom(AlternativeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SeqContext : AlternativeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WeightContext weight() {
			return GetRuleContext<WeightContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SequenceElemContext[] sequenceElem() {
			return GetRuleContexts<SequenceElemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SequenceElemContext sequenceElem(int i) {
			return GetRuleContext<SequenceElemContext>(i);
		}
		public SeqContext(AlternativeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.EnterSeq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.ExitSeq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarGenLangVisitor<TResult> typedVisitor = visitor as IGrammarGenLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlternativeContext alternative() {
		AlternativeContext _localctx = new AlternativeContext(Context, State);
		EnterRule(_localctx, 10, RULE_alternative);
		int _la;
		try {
			_localctx = new SeqContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 57;
				condition();
				}
				}
				State = 62;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 64;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__7) {
				{
				State = 63;
				weight();
				}
			}

			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 66;
				sequenceElem(0);
				}
				}
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__9) | (1L << T__11) | (1L << EscapedString) | (1L << Identifier))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(GrammarGenLangParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NegatedContext negated() {
			return GetRuleContext<NegatedContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarGenLangVisitor<TResult> typedVisitor = visitor as IGrammarGenLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 12, RULE_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			Match(T__6);
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 72;
				negated();
				}
			}

			State = 75;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NegatedContext : ParserRuleContext {
		public NegatedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negated; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.EnterNegated(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.ExitNegated(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarGenLangVisitor<TResult> typedVisitor = visitor as IGrammarGenLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegated(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NegatedContext negated() {
		NegatedContext _localctx = new NegatedContext(Context, State);
		EnterRule(_localctx, 14, RULE_negated);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WeightContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(GrammarGenLangParser.Number, 0); }
		public WeightContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_weight; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.EnterWeight(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.ExitWeight(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarGenLangVisitor<TResult> typedVisitor = visitor as IGrammarGenLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWeight(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WeightContext weight() {
		WeightContext _localctx = new WeightContext(Context, State);
		EnterRule(_localctx, 16, RULE_weight);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			Match(T__7);
			State = 80;
			Match(Number);
			State = 81;
			Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequenceElemContext : ParserRuleContext {
		public SequenceElemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequenceElem; } }
	 
		public SequenceElemContext() { }
		public virtual void CopyFrom(SequenceElemContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StrContext : SequenceElemContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EscapedString() { return GetToken(GrammarGenLangParser.EscapedString, 0); }
		public StrContext(SequenceElemContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.EnterStr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.ExitStr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarGenLangVisitor<TResult> typedVisitor = visitor as IGrammarGenLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GroupContext : SequenceElemContext {
		[System.Diagnostics.DebuggerNonUserCode] public GgproductionContext ggproduction() {
			return GetRuleContext<GgproductionContext>(0);
		}
		public GroupContext(SequenceElemContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.EnterGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.ExitGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarGenLangVisitor<TResult> typedVisitor = visitor as IGrammarGenLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallContext : SequenceElemContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(GrammarGenLangParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GgproductionContext[] ggproduction() {
			return GetRuleContexts<GgproductionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GgproductionContext ggproduction(int i) {
			return GetRuleContext<GgproductionContext>(i);
		}
		public CallContext(SequenceElemContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarGenLangVisitor<TResult> typedVisitor = visitor as IGrammarGenLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptContext : SequenceElemContext {
		[System.Diagnostics.DebuggerNonUserCode] public GgproductionContext ggproduction() {
			return GetRuleContext<GgproductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WeightContext weight() {
			return GetRuleContext<WeightContext>(0);
		}
		public OptContext(SequenceElemContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.EnterOpt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.ExitOpt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarGenLangVisitor<TResult> typedVisitor = visitor as IGrammarGenLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentContext : SequenceElemContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(GrammarGenLangParser.Identifier, 0); }
		public IdentContext(SequenceElemContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.EnterIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.ExitIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarGenLangVisitor<TResult> typedVisitor = visitor as IGrammarGenLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdent(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StarContext : SequenceElemContext {
		[System.Diagnostics.DebuggerNonUserCode] public SequenceElemContext sequenceElem() {
			return GetRuleContext<SequenceElemContext>(0);
		}
		public StarContext(SequenceElemContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.EnterStar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.ExitStar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarGenLangVisitor<TResult> typedVisitor = visitor as IGrammarGenLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PlusContext : SequenceElemContext {
		[System.Diagnostics.DebuggerNonUserCode] public SequenceElemContext sequenceElem() {
			return GetRuleContext<SequenceElemContext>(0);
		}
		public PlusContext(SequenceElemContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.EnterPlus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.ExitPlus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarGenLangVisitor<TResult> typedVisitor = visitor as IGrammarGenLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlus(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SequenceElemContext sequenceElem() {
		return sequenceElem(0);
	}

	private SequenceElemContext sequenceElem(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SequenceElemContext _localctx = new SequenceElemContext(Context, _parentState);
		SequenceElemContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_sequenceElem, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				_localctx = new GroupContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 84;
				Match(T__9);
				State = 85;
				ggproduction();
				State = 86;
				Match(T__10);
				}
				break;
			case 2:
				{
				_localctx = new OptContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 88;
				Match(T__11);
				State = 90;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
				case 1:
					{
					State = 89;
					weight();
					}
					break;
				}
				State = 92;
				ggproduction();
				State = 93;
				Match(T__12);
				}
				break;
			case 3:
				{
				_localctx = new CallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 95;
				Match(Identifier);
				State = 96;
				Match(T__2);
				State = 97;
				ggproduction();
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 98;
					Match(T__3);
					State = 99;
					ggproduction();
					}
					}
					State = 104;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 105;
				Match(T__4);
				}
				break;
			case 4:
				{
				_localctx = new IdentContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 107;
				Match(Identifier);
				}
				break;
			case 5:
				{
				_localctx = new StrContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 108;
				Match(EscapedString);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 117;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 115;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
					case 1:
						{
						_localctx = new StarContext(new SequenceElemContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_sequenceElem);
						State = 111;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 112;
						Match(T__13);
						}
						break;
					case 2:
						{
						_localctx = new PlusContext(new SequenceElemContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_sequenceElem);
						State = 113;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 114;
						Match(T__14);
						}
						break;
					}
					} 
				}
				State = 119;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return sequenceElem_sempred((SequenceElemContext)_localctx, predIndex);
		}
		return true;
	}
	private bool sequenceElem_sempred(SequenceElemContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x17', '{', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x3', '\x2', '\x6', '\x2', '\x18', '\n', '\x2', '\r', '\x2', '\xE', '\x2', 
		'\x19', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x1E', '\n', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\a', '\x5', '*', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '-', '\v', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\x37', '\n', '\x6', 
		'\f', '\x6', '\xE', '\x6', ':', '\v', '\x6', '\x3', '\a', '\a', '\a', 
		'=', '\n', '\a', '\f', '\a', '\xE', '\a', '@', '\v', '\a', '\x3', '\a', 
		'\x5', '\a', '\x43', '\n', '\a', '\x3', '\a', '\x6', '\a', '\x46', '\n', 
		'\a', '\r', '\a', '\xE', '\a', 'G', '\x3', '\b', '\x3', '\b', '\x5', '\b', 
		'L', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', 
		'\v', ']', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', 'g', '\n', 
		'\v', '\f', '\v', '\xE', '\v', 'j', '\v', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x5', '\v', 'p', '\n', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\a', '\v', 'v', '\n', '\v', '\f', '\v', 
		'\xE', '\v', 'y', '\v', '\v', '\x3', '\v', '\x2', '\x3', '\x14', '\f', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x2', '\x2', '\x2', '\x80', '\x2', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x6', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\b', '$', '\x3', '\x2', '\x2', '\x2', '\n', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\f', '>', '\x3', '\x2', '\x2', '\x2', '\xE', 'I', 
		'\x3', '\x2', '\x2', '\x2', '\x10', 'O', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'Q', '\x3', '\x2', '\x2', '\x2', '\x14', 'o', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\x18', '\x5', '\x4', '\x3', '\x2', '\x17', '\x16', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x19', '\x3', '\x2', '\x2', '\x2', '\x19', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x19', '\x1A', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x3', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1E', '\x5', '\x6', 
		'\x4', '\x2', '\x1C', '\x1E', '\x5', '\b', '\x5', '\x2', '\x1D', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x1D', '\x1C', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\x5', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\a', '\x16', 
		'\x2', '\x2', ' ', '!', '\a', '\x3', '\x2', '\x2', '!', '\"', '\x5', '\n', 
		'\x6', '\x2', '\"', '#', '\a', '\x4', '\x2', '\x2', '#', '\a', '\x3', 
		'\x2', '\x2', '\x2', '$', '%', '\a', '\x16', '\x2', '\x2', '%', '&', '\a', 
		'\x5', '\x2', '\x2', '&', '+', '\a', '\x16', '\x2', '\x2', '\'', '(', 
		'\a', '\x6', '\x2', '\x2', '(', '*', '\a', '\x16', '\x2', '\x2', ')', 
		'\'', '\x3', '\x2', '\x2', '\x2', '*', '-', '\x3', '\x2', '\x2', '\x2', 
		'+', ')', '\x3', '\x2', '\x2', '\x2', '+', ',', '\x3', '\x2', '\x2', '\x2', 
		',', '.', '\x3', '\x2', '\x2', '\x2', '-', '+', '\x3', '\x2', '\x2', '\x2', 
		'.', '/', '\a', '\a', '\x2', '\x2', '/', '\x30', '\a', '\x3', '\x2', '\x2', 
		'\x30', '\x31', '\x5', '\n', '\x6', '\x2', '\x31', '\x32', '\a', '\x4', 
		'\x2', '\x2', '\x32', '\t', '\x3', '\x2', '\x2', '\x2', '\x33', '\x38', 
		'\x5', '\f', '\a', '\x2', '\x34', '\x35', '\a', '\b', '\x2', '\x2', '\x35', 
		'\x37', '\x5', '\f', '\a', '\x2', '\x36', '\x34', '\x3', '\x2', '\x2', 
		'\x2', '\x37', ':', '\x3', '\x2', '\x2', '\x2', '\x38', '\x36', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\x39', '\x3', '\x2', '\x2', '\x2', '\x39', 
		'\v', '\x3', '\x2', '\x2', '\x2', ':', '\x38', '\x3', '\x2', '\x2', '\x2', 
		';', '=', '\x5', '\xE', '\b', '\x2', '<', ';', '\x3', '\x2', '\x2', '\x2', 
		'=', '@', '\x3', '\x2', '\x2', '\x2', '>', '<', '\x3', '\x2', '\x2', '\x2', 
		'>', '?', '\x3', '\x2', '\x2', '\x2', '?', '\x42', '\x3', '\x2', '\x2', 
		'\x2', '@', '>', '\x3', '\x2', '\x2', '\x2', '\x41', '\x43', '\x5', '\x12', 
		'\n', '\x2', '\x42', '\x41', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x43', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x46', '\x5', '\x14', '\v', '\x2', '\x45', '\x44', '\x3', '\x2', 
		'\x2', '\x2', '\x46', 'G', '\x3', '\x2', '\x2', '\x2', 'G', '\x45', '\x3', 
		'\x2', '\x2', '\x2', 'G', 'H', '\x3', '\x2', '\x2', '\x2', 'H', '\r', 
		'\x3', '\x2', '\x2', '\x2', 'I', 'K', '\a', '\t', '\x2', '\x2', 'J', 'L', 
		'\x5', '\x10', '\t', '\x2', 'K', 'J', '\x3', '\x2', '\x2', '\x2', 'K', 
		'L', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\x3', '\x2', '\x2', '\x2', 
		'M', 'N', '\a', '\x16', '\x2', '\x2', 'N', '\xF', '\x3', '\x2', '\x2', 
		'\x2', 'O', 'P', '\a', '\t', '\x2', '\x2', 'P', '\x11', '\x3', '\x2', 
		'\x2', '\x2', 'Q', 'R', '\a', '\n', '\x2', '\x2', 'R', 'S', '\a', '\x17', 
		'\x2', '\x2', 'S', 'T', '\a', '\v', '\x2', '\x2', 'T', '\x13', '\x3', 
		'\x2', '\x2', '\x2', 'U', 'V', '\b', '\v', '\x1', '\x2', 'V', 'W', '\a', 
		'\f', '\x2', '\x2', 'W', 'X', '\x5', '\n', '\x6', '\x2', 'X', 'Y', '\a', 
		'\r', '\x2', '\x2', 'Y', 'p', '\x3', '\x2', '\x2', '\x2', 'Z', '\\', '\a', 
		'\xE', '\x2', '\x2', '[', ']', '\x5', '\x12', '\n', '\x2', '\\', '[', 
		'\x3', '\x2', '\x2', '\x2', '\\', ']', '\x3', '\x2', '\x2', '\x2', ']', 
		'^', '\x3', '\x2', '\x2', '\x2', '^', '_', '\x5', '\n', '\x6', '\x2', 
		'_', '`', '\a', '\xF', '\x2', '\x2', '`', 'p', '\x3', '\x2', '\x2', '\x2', 
		'\x61', '\x62', '\a', '\x16', '\x2', '\x2', '\x62', '\x63', '\a', '\x5', 
		'\x2', '\x2', '\x63', 'h', '\x5', '\n', '\x6', '\x2', '\x64', '\x65', 
		'\a', '\x6', '\x2', '\x2', '\x65', 'g', '\x5', '\n', '\x6', '\x2', '\x66', 
		'\x64', '\x3', '\x2', '\x2', '\x2', 'g', 'j', '\x3', '\x2', '\x2', '\x2', 
		'h', '\x66', '\x3', '\x2', '\x2', '\x2', 'h', 'i', '\x3', '\x2', '\x2', 
		'\x2', 'i', 'k', '\x3', '\x2', '\x2', '\x2', 'j', 'h', '\x3', '\x2', '\x2', 
		'\x2', 'k', 'l', '\a', '\a', '\x2', '\x2', 'l', 'p', '\x3', '\x2', '\x2', 
		'\x2', 'm', 'p', '\a', '\x16', '\x2', '\x2', 'n', 'p', '\a', '\x15', '\x2', 
		'\x2', 'o', 'U', '\x3', '\x2', '\x2', '\x2', 'o', 'Z', '\x3', '\x2', '\x2', 
		'\x2', 'o', '\x61', '\x3', '\x2', '\x2', '\x2', 'o', 'm', '\x3', '\x2', 
		'\x2', '\x2', 'o', 'n', '\x3', '\x2', '\x2', '\x2', 'p', 'w', '\x3', '\x2', 
		'\x2', '\x2', 'q', 'r', '\f', '\a', '\x2', '\x2', 'r', 'v', '\a', '\x10', 
		'\x2', '\x2', 's', 't', '\f', '\x6', '\x2', '\x2', 't', 'v', '\a', '\x11', 
		'\x2', '\x2', 'u', 'q', '\x3', '\x2', '\x2', '\x2', 'u', 's', '\x3', '\x2', 
		'\x2', '\x2', 'v', 'y', '\x3', '\x2', '\x2', '\x2', 'w', 'u', '\x3', '\x2', 
		'\x2', '\x2', 'w', 'x', '\x3', '\x2', '\x2', '\x2', 'x', '\x15', '\x3', 
		'\x2', '\x2', '\x2', 'y', 'w', '\x3', '\x2', '\x2', '\x2', '\xF', '\x19', 
		'\x1D', '+', '\x38', '>', '\x42', 'G', 'K', '\\', 'h', 'o', 'u', 'w',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace SharpIrcBot.Plugins.GrammarGen.Lang
