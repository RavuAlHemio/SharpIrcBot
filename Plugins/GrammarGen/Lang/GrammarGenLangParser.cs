//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from GrammarGenLang.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SharpIrcBot.Plugins.GrammarGen.Lang {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public partial class GrammarGenLangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, Whitespaces=15, Comments=16, 
		LineComments=17, EscapedString=18, Identifier=19, Number=20;
	public const int
		RULE_ggrulebook = 0, RULE_ruledef = 1, RULE_ggrule = 2, RULE_paramrule = 3, 
		RULE_ggproduction = 4, RULE_alternative = 5, RULE_weight = 6, RULE_sequenceElem = 7;
	public static readonly string[] ruleNames = {
		"ggrulebook", "ruledef", "ggrule", "paramrule", "ggproduction", "alternative", 
		"weight", "sequenceElem"
	};

	private static readonly string[] _LiteralNames = {
		null, "':'", "';'", "'{'", "','", "'}'", "'|'", "'<'", "'>'", "'('", "')'", 
		"'['", "']'", "'*'", "'+'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "Whitespaces", "Comments", "LineComments", "EscapedString", 
		"Identifier", "Number"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GrammarGenLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GrammarGenLangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GrammarGenLangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GrammarGenLangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class GgrulebookContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuledefContext[] ruledef() {
			return GetRuleContexts<RuledefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuledefContext ruledef(int i) {
			return GetRuleContext<RuledefContext>(i);
		}
		public GgrulebookContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ggrulebook; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.EnterGgrulebook(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.ExitGgrulebook(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarGenLangVisitor<TResult> typedVisitor = visitor as IGrammarGenLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGgrulebook(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GgrulebookContext ggrulebook() {
		GgrulebookContext _localctx = new GgrulebookContext(Context, State);
		EnterRule(_localctx, 0, RULE_ggrulebook);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 17;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 16;
				ruledef();
				}
				}
				State = 19;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Identifier );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuledefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GgruleContext ggrule() {
			return GetRuleContext<GgruleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamruleContext paramrule() {
			return GetRuleContext<ParamruleContext>(0);
		}
		public RuledefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruledef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.EnterRuledef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.ExitRuledef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarGenLangVisitor<TResult> typedVisitor = visitor as IGrammarGenLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRuledef(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RuledefContext ruledef() {
		RuledefContext _localctx = new RuledefContext(Context, State);
		EnterRule(_localctx, 2, RULE_ruledef);
		try {
			State = 23;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 21;
				ggrule();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 22;
				paramrule();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GgruleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(GrammarGenLangParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GgproductionContext ggproduction() {
			return GetRuleContext<GgproductionContext>(0);
		}
		public GgruleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ggrule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.EnterGgrule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.ExitGgrule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarGenLangVisitor<TResult> typedVisitor = visitor as IGrammarGenLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGgrule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GgruleContext ggrule() {
		GgruleContext _localctx = new GgruleContext(Context, State);
		EnterRule(_localctx, 4, RULE_ggrule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			Match(Identifier);
			State = 26;
			Match(T__0);
			State = 27;
			ggproduction();
			State = 28;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamruleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(GrammarGenLangParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(GrammarGenLangParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GgproductionContext ggproduction() {
			return GetRuleContext<GgproductionContext>(0);
		}
		public ParamruleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramrule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.EnterParamrule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.ExitParamrule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarGenLangVisitor<TResult> typedVisitor = visitor as IGrammarGenLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParamrule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamruleContext paramrule() {
		ParamruleContext _localctx = new ParamruleContext(Context, State);
		EnterRule(_localctx, 6, RULE_paramrule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30;
			Match(Identifier);
			State = 31;
			Match(T__2);
			State = 32;
			Match(Identifier);
			State = 35;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 33;
				Match(T__3);
				State = 34;
				Match(Identifier);
				}
				}
				State = 37;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__3 );
			State = 39;
			Match(T__4);
			State = 40;
			Match(T__0);
			State = 41;
			ggproduction();
			State = 42;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GgproductionContext : ParserRuleContext {
		public GgproductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ggproduction; } }
	 
		public GgproductionContext() { }
		public virtual void CopyFrom(GgproductionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AlternContext : GgproductionContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlternativeContext[] alternative() {
			return GetRuleContexts<AlternativeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlternativeContext alternative(int i) {
			return GetRuleContext<AlternativeContext>(i);
		}
		public AlternContext(GgproductionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.EnterAltern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.ExitAltern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarGenLangVisitor<TResult> typedVisitor = visitor as IGrammarGenLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAltern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GgproductionContext ggproduction() {
		GgproductionContext _localctx = new GgproductionContext(Context, State);
		EnterRule(_localctx, 8, RULE_ggproduction);
		int _la;
		try {
			_localctx = new AlternContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			alternative();
			State = 49;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 45;
				Match(T__5);
				State = 46;
				alternative();
				}
				}
				State = 51;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlternativeContext : ParserRuleContext {
		public AlternativeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alternative; } }
	 
		public AlternativeContext() { }
		public virtual void CopyFrom(AlternativeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SeqContext : AlternativeContext {
		[System.Diagnostics.DebuggerNonUserCode] public WeightContext weight() {
			return GetRuleContext<WeightContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SequenceElemContext[] sequenceElem() {
			return GetRuleContexts<SequenceElemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SequenceElemContext sequenceElem(int i) {
			return GetRuleContext<SequenceElemContext>(i);
		}
		public SeqContext(AlternativeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.EnterSeq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.ExitSeq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarGenLangVisitor<TResult> typedVisitor = visitor as IGrammarGenLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AlternativeContext alternative() {
		AlternativeContext _localctx = new AlternativeContext(Context, State);
		EnterRule(_localctx, 10, RULE_alternative);
		int _la;
		try {
			_localctx = new SeqContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 52;
				weight();
				}
			}

			State = 56;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 55;
				sequenceElem(0);
				}
				}
				State = 58;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__10) | (1L << EscapedString) | (1L << Identifier))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WeightContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(GrammarGenLangParser.Number, 0); }
		public WeightContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_weight; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.EnterWeight(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.ExitWeight(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarGenLangVisitor<TResult> typedVisitor = visitor as IGrammarGenLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWeight(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WeightContext weight() {
		WeightContext _localctx = new WeightContext(Context, State);
		EnterRule(_localctx, 12, RULE_weight);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			Match(T__6);
			State = 61;
			Match(Number);
			State = 62;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SequenceElemContext : ParserRuleContext {
		public SequenceElemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sequenceElem; } }
	 
		public SequenceElemContext() { }
		public virtual void CopyFrom(SequenceElemContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StrContext : SequenceElemContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EscapedString() { return GetToken(GrammarGenLangParser.EscapedString, 0); }
		public StrContext(SequenceElemContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.EnterStr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.ExitStr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarGenLangVisitor<TResult> typedVisitor = visitor as IGrammarGenLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GroupContext : SequenceElemContext {
		[System.Diagnostics.DebuggerNonUserCode] public GgproductionContext ggproduction() {
			return GetRuleContext<GgproductionContext>(0);
		}
		public GroupContext(SequenceElemContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.EnterGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.ExitGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarGenLangVisitor<TResult> typedVisitor = visitor as IGrammarGenLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallContext : SequenceElemContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(GrammarGenLangParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GgproductionContext[] ggproduction() {
			return GetRuleContexts<GgproductionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GgproductionContext ggproduction(int i) {
			return GetRuleContext<GgproductionContext>(i);
		}
		public CallContext(SequenceElemContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarGenLangVisitor<TResult> typedVisitor = visitor as IGrammarGenLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptContext : SequenceElemContext {
		[System.Diagnostics.DebuggerNonUserCode] public GgproductionContext ggproduction() {
			return GetRuleContext<GgproductionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WeightContext weight() {
			return GetRuleContext<WeightContext>(0);
		}
		public OptContext(SequenceElemContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.EnterOpt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.ExitOpt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarGenLangVisitor<TResult> typedVisitor = visitor as IGrammarGenLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentContext : SequenceElemContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(GrammarGenLangParser.Identifier, 0); }
		public IdentContext(SequenceElemContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.EnterIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.ExitIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarGenLangVisitor<TResult> typedVisitor = visitor as IGrammarGenLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdent(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StarContext : SequenceElemContext {
		[System.Diagnostics.DebuggerNonUserCode] public SequenceElemContext sequenceElem() {
			return GetRuleContext<SequenceElemContext>(0);
		}
		public StarContext(SequenceElemContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.EnterStar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.ExitStar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarGenLangVisitor<TResult> typedVisitor = visitor as IGrammarGenLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PlusContext : SequenceElemContext {
		[System.Diagnostics.DebuggerNonUserCode] public SequenceElemContext sequenceElem() {
			return GetRuleContext<SequenceElemContext>(0);
		}
		public PlusContext(SequenceElemContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.EnterPlus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarGenLangListener typedListener = listener as IGrammarGenLangListener;
			if (typedListener != null) typedListener.ExitPlus(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarGenLangVisitor<TResult> typedVisitor = visitor as IGrammarGenLangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlus(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SequenceElemContext sequenceElem() {
		return sequenceElem(0);
	}

	private SequenceElemContext sequenceElem(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SequenceElemContext _localctx = new SequenceElemContext(Context, _parentState);
		SequenceElemContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_sequenceElem, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				_localctx = new GroupContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 65;
				Match(T__8);
				State = 66;
				ggproduction();
				State = 67;
				Match(T__9);
				}
				break;
			case 2:
				{
				_localctx = new OptContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 69;
				Match(T__10);
				State = 71;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
				case 1:
					{
					State = 70;
					weight();
					}
					break;
				}
				State = 73;
				ggproduction();
				State = 74;
				Match(T__11);
				}
				break;
			case 3:
				{
				_localctx = new CallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 76;
				Match(Identifier);
				State = 77;
				Match(T__2);
				State = 78;
				ggproduction();
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 79;
					Match(T__3);
					State = 80;
					ggproduction();
					}
					}
					State = 85;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 86;
				Match(T__4);
				}
				break;
			case 4:
				{
				_localctx = new IdentContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 88;
				Match(Identifier);
				}
				break;
			case 5:
				{
				_localctx = new StrContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 89;
				Match(EscapedString);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 98;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 96;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
					case 1:
						{
						_localctx = new StarContext(new SequenceElemContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_sequenceElem);
						State = 92;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 93;
						Match(T__12);
						}
						break;
					case 2:
						{
						_localctx = new PlusContext(new SequenceElemContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_sequenceElem);
						State = 94;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 95;
						Match(T__13);
						}
						break;
					}
					} 
				}
				State = 100;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 7: return sequenceElem_sempred((SequenceElemContext)_localctx, predIndex);
		}
		return true;
	}
	private bool sequenceElem_sempred(SequenceElemContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x16', 'h', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x3', '\x2', '\x6', '\x2', '\x14', '\n', '\x2', 
		'\r', '\x2', '\xE', '\x2', '\x15', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', '\x1A', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x6', '\x5', '&', '\n', '\x5', '\r', '\x5', 
		'\xE', '\x5', '\'', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '\x32', 
		'\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x35', '\v', '\x6', '\x3', '\a', 
		'\x5', '\a', '\x38', '\n', '\a', '\x3', '\a', '\x6', '\a', ';', '\n', 
		'\a', '\r', '\a', '\xE', '\a', '<', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 'J', '\n', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\a', '\t', 'T', '\n', '\t', '\f', '\t', '\xE', '\t', 
		'W', '\v', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', 
		'\t', ']', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\a', '\t', '\x63', '\n', '\t', '\f', '\t', '\xE', '\t', '\x66', '\v', 
		'\t', '\x3', '\t', '\x2', '\x3', '\x10', '\n', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x2', '\x2', '\x2', 'm', '\x2', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\x19', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\b', ' ', '\x3', '\x2', '\x2', '\x2', 
		'\n', '.', '\x3', '\x2', '\x2', '\x2', '\f', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\xE', '>', '\x3', '\x2', '\x2', '\x2', '\x10', '\\', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\x14', '\x5', '\x4', '\x3', '\x2', '\x13', '\x12', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x15', '\x13', '\x3', '\x2', '\x2', '\x2', '\x15', '\x16', '\x3', '\x2', 
		'\x2', '\x2', '\x16', '\x3', '\x3', '\x2', '\x2', '\x2', '\x17', '\x1A', 
		'\x5', '\x6', '\x4', '\x2', '\x18', '\x1A', '\x5', '\b', '\x5', '\x2', 
		'\x19', '\x17', '\x3', '\x2', '\x2', '\x2', '\x19', '\x18', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\x5', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1C', 
		'\a', '\x15', '\x2', '\x2', '\x1C', '\x1D', '\a', '\x3', '\x2', '\x2', 
		'\x1D', '\x1E', '\x5', '\n', '\x6', '\x2', '\x1E', '\x1F', '\a', '\x4', 
		'\x2', '\x2', '\x1F', '\a', '\x3', '\x2', '\x2', '\x2', ' ', '!', '\a', 
		'\x15', '\x2', '\x2', '!', '\"', '\a', '\x5', '\x2', '\x2', '\"', '%', 
		'\a', '\x15', '\x2', '\x2', '#', '$', '\a', '\x6', '\x2', '\x2', '$', 
		'&', '\a', '\x15', '\x2', '\x2', '%', '#', '\x3', '\x2', '\x2', '\x2', 
		'&', '\'', '\x3', '\x2', '\x2', '\x2', '\'', '%', '\x3', '\x2', '\x2', 
		'\x2', '\'', '(', '\x3', '\x2', '\x2', '\x2', '(', ')', '\x3', '\x2', 
		'\x2', '\x2', ')', '*', '\a', '\a', '\x2', '\x2', '*', '+', '\a', '\x3', 
		'\x2', '\x2', '+', ',', '\x5', '\n', '\x6', '\x2', ',', '-', '\a', '\x4', 
		'\x2', '\x2', '-', '\t', '\x3', '\x2', '\x2', '\x2', '.', '\x33', '\x5', 
		'\f', '\a', '\x2', '/', '\x30', '\a', '\b', '\x2', '\x2', '\x30', '\x32', 
		'\x5', '\f', '\a', '\x2', '\x31', '/', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x33', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\x34', '\x3', '\x2', '\x2', '\x2', '\x34', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\x35', '\x33', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\x38', '\x5', '\xE', '\b', '\x2', '\x37', '\x36', '\x3', '\x2', '\x2', 
		'\x2', '\x37', '\x38', '\x3', '\x2', '\x2', '\x2', '\x38', ':', '\x3', 
		'\x2', '\x2', '\x2', '\x39', ';', '\x5', '\x10', '\t', '\x2', ':', '\x39', 
		'\x3', '\x2', '\x2', '\x2', ';', '<', '\x3', '\x2', '\x2', '\x2', '<', 
		':', '\x3', '\x2', '\x2', '\x2', '<', '=', '\x3', '\x2', '\x2', '\x2', 
		'=', '\r', '\x3', '\x2', '\x2', '\x2', '>', '?', '\a', '\t', '\x2', '\x2', 
		'?', '@', '\a', '\x16', '\x2', '\x2', '@', '\x41', '\a', '\n', '\x2', 
		'\x2', '\x41', '\xF', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\b', 
		'\t', '\x1', '\x2', '\x43', '\x44', '\a', '\v', '\x2', '\x2', '\x44', 
		'\x45', '\x5', '\n', '\x6', '\x2', '\x45', '\x46', '\a', '\f', '\x2', 
		'\x2', '\x46', ']', '\x3', '\x2', '\x2', '\x2', 'G', 'I', '\a', '\r', 
		'\x2', '\x2', 'H', 'J', '\x5', '\xE', '\b', '\x2', 'I', 'H', '\x3', '\x2', 
		'\x2', '\x2', 'I', 'J', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\x3', '\x2', 
		'\x2', '\x2', 'K', 'L', '\x5', '\n', '\x6', '\x2', 'L', 'M', '\a', '\xE', 
		'\x2', '\x2', 'M', ']', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\a', '\x15', 
		'\x2', '\x2', 'O', 'P', '\a', '\x5', '\x2', '\x2', 'P', 'U', '\x5', '\n', 
		'\x6', '\x2', 'Q', 'R', '\a', '\x6', '\x2', '\x2', 'R', 'T', '\x5', '\n', 
		'\x6', '\x2', 'S', 'Q', '\x3', '\x2', '\x2', '\x2', 'T', 'W', '\x3', '\x2', 
		'\x2', '\x2', 'U', 'S', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'X', '\x3', '\x2', '\x2', '\x2', 'W', 'U', '\x3', '\x2', 
		'\x2', '\x2', 'X', 'Y', '\a', '\a', '\x2', '\x2', 'Y', ']', '\x3', '\x2', 
		'\x2', '\x2', 'Z', ']', '\a', '\x15', '\x2', '\x2', '[', ']', '\a', '\x14', 
		'\x2', '\x2', '\\', '\x42', '\x3', '\x2', '\x2', '\x2', '\\', 'G', '\x3', 
		'\x2', '\x2', '\x2', '\\', 'N', '\x3', '\x2', '\x2', '\x2', '\\', 'Z', 
		'\x3', '\x2', '\x2', '\x2', '\\', '[', '\x3', '\x2', '\x2', '\x2', ']', 
		'\x64', '\x3', '\x2', '\x2', '\x2', '^', '_', '\f', '\a', '\x2', '\x2', 
		'_', '\x63', '\a', '\xF', '\x2', '\x2', '`', '\x61', '\f', '\x6', '\x2', 
		'\x2', '\x61', '\x63', '\a', '\x10', '\x2', '\x2', '\x62', '^', '\x3', 
		'\x2', '\x2', '\x2', '\x62', '`', '\x3', '\x2', '\x2', '\x2', '\x63', 
		'\x66', '\x3', '\x2', '\x2', '\x2', '\x64', '\x62', '\x3', '\x2', '\x2', 
		'\x2', '\x64', '\x65', '\x3', '\x2', '\x2', '\x2', '\x65', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x66', '\x64', '\x3', '\x2', '\x2', '\x2', '\r', 
		'\x15', '\x19', '\'', '\x33', '\x37', '<', 'I', 'U', '\\', '\x62', '\x64',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace SharpIrcBot.Plugins.GrammarGen.Lang
